name: 'Run TEAM Engine'

description: 'Spins up a TEAM Engine instance inside a docker container'

branding:
  icon: 'award'
  color: 'blue'

inputs:
  test-suite-identifier:
    description: 'Identifier of the Executable Test Suite (etscode) to be run. Example: ogcapi-features-1.0'
  test-session-arguments:
    description: >
      Space-separated string with arguments that are to be sent for running the test session. example:
      'iut=http://pygeoapi:5000'
  teamengine-url:
    required: false
    description: >
      URL for the teamengine instance to use for running the test suite. If not provided, this will spin up a docker
      container using the [ogccite/teamengine-production:1.0-SNAPSHOT](https://hub.docker.com/r/ogccite/teamengine-production) image.
      If you specify a custom teamengine URL you may also optonally supply authentication credentials by defining 
      them as secrets - Expected secret names are: `teamengine_username` and `teamengine_password`.
  treat-skipped-tests-as-failures:
    required: false
    default: false
    description: Whether to treat skipped tests as an indication of failure or not.
  exit-with-error-on-suite-failed-result:
    required: false
    default: false
    description: Whether the action errors out if the test execution results show a failure or not

outputs:
  results:
    description: 'Test results'
    value: '${{ steps.run-executable-test-suite.outputs.results }}'

runs:
  using: 'composite'
  steps:
    - name: 'Add action path to the global path'
      shell: bash
      run: echo "${{ github.action_path }}" >> ${GITHUB_PATH}
    - name: 'Set up Python'
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: 'Set up poetry'
      uses: Gr1N/setup-poetry@v9
      with:
        poetry-version: '1.8.3'
    - name: 'Set up cache'
      uses: actions/cache@v4
      with:
        path: ~/.cache/pypoetry/virtualenvs
        key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
    - name: 'install action code'
      shell: 'bash'
      run: |
        cd ${{ github.action_path }}
        poetry install
    - name: 'Start TEAM engine'
      if: ${{ !inputs.teamengine-url }}
      shell: 'bash'
      run: >
        docker run
        --detach
        --rm
        --name teamengine
        --network host
        ogccite/teamengine-production:1.0-SNAPSHOT
    - name: 'Run executable test suite'
      id: 'run_executable_test_suite'
      shell: bash
      run: |
        cd ${{ github.action_path }}
        raw_result_output_path=raw-result.xml
        poetry run ogc-cite-action execute-test-suite \
            ${{ inputs.teamengine-url || 'http://localhost:8080/teamengine' }} \
            ${{ inputs.test-suite-identifier }} \
            --output-format=raw \
            --teamengine-username=${{ env.teamengine_username || 'ogctest' }} \
            --teamengine-password=${{ env.teamengine_password || 'ogctest' }} \
            ${{ inputs.test-session-arguments }} 1> ${raw_result_output_path}
        echo "RAW_RESULT_OUTPUT_PATH=${{ github.action_path }}/${raw_result_output_path}" >> "${GITHUB_OUTPUT}"
    - name: 'Store execution results as artifacts'
      uses: actions/upload-artifact@v4
      with:
        name: 'execution-results'
        path: |
          ${{ steps.run_executable_test_suite.outputs.RAW_RESULT_OUTPUT_PATH }}
    - name: 'parse execution results'
      id: 'parse_execution_results'
      shell: bash
      run: |
        cd ${{ github.action_path }}
        md_result_output_path=test-result.md
        poetry run ogc-cite-action parse-result \
            --output-format=markdown \
            ${{ steps.run_executable_test_suite.outputs.RAW_RESULT_OUTPUT_PATH }} 1> ${md_result_output_path}
        echo "MARKDOWN_RESULT_OUTPUT_PATH=${{ github.action_path }}/${md_result_output_path}" >> "${GITHUB_OUTPUT}"
    - name: 'Display markdown execution results'
      shell: bash
      run: |
        cat ${{ steps.parse_execution_results.outputs.MARKDOWN_RESULT_OUTPUT_PATH }} >> ${GITHUB_STEP_SUMMARY}
