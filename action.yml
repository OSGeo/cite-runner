name: 'CITE runner'

description: 'Runner for CITE'

branding:
  icon: 'award'
  color: 'blue'

inputs:
  test_suite_identifier:
    description: 'Identifier of the Executable Test Suite (etscode) to be run. Example: ogcapi-features-1.0'
  test_session_arguments:
    description: >
      Space-separated string with arguments that are to be sent for running the test session. example:
      'iut=http://pygeoapi:5000'
  teamengine_url:
    required: false
    description: >
      URL for the teamengine instance to use for running the test suite. If not provided, this will spin up a docker
      container using the [ogccite/teamengine-production:1.0-SNAPSHOT](https://hub.docker.com/r/ogccite/teamengine-production) image.
      If you specify a custom teamengine URL you may also optonally supply authentication credentials by defining
      them as secrets - Expected secret names are: `teamengine_username` and `teamengine_password`.
  teamengine_username:
    required: false
    default: "ogctest"
    description: Username for accessing teamengine
  teamengine_password:
    required: false
    default: "ogctest"
    description: Password for accessing teamengine
  network_timeout_seconds:
    required: false
    default: "120"
    description: Timeout value for network requests
  include_failed_test_details:
    required: false
    default: true
    description: Whether the output report should include information about failed tests
  include_skipped_test_details:
    required: false
    default: true
    description: Whether the output report should include information about skipped tests
  include_passed_test_details:
    required: false
    default: false
    description: Whether the output report should include information about passed tests

outputs:
  results:
    description: 'Test results'
    value: '${{ steps.parse_execution_results.outputs.MARKDOWN_RESULT_OUTPUT_PATH }}'

runs:
  using: 'composite'
  steps:
    - name: 'Add action path to the global path'
      shell: bash
      run: echo "${{ github.action_path }}" >> ${GITHUB_PATH}
    - name: 'Install uv'
      uses: astral-sh/setup-uv@v5
      with:
        version: "0.6.13"
        enable-cache: true
        cache-dependency-glob: "uv.lock"
    - name: 'Set up Python'
      uses: actions/setup-python@v5
      with:
        python-version-file: "pyproject.toml"
    - name: 'install action code'
      shell: 'bash'
      run: |
        cd ${{ github.action_path }}
        uv sync --frozen
    - name: 'Start TEAM engine container'
      if: ${{ !inputs.teamengine_url }}
      shell: 'bash'
      run: >
        docker run
        --detach
        --rm
        --name teamengine
        --network host
        ogccite/teamengine-production:1.0-SNAPSHOT
    - name: 'Run executable test suite'
      id: 'run_executable_test_suite'
      shell: bash
      run: |
        cd ${{ github.action_path }}
        raw_result_output_path=raw-result.xml
        uv run cite-runner \
            --network-timeout=${{ inputs.network_timeout_seconds }} \
            execute-test-suite-from-github-actions \
            ${{ inputs.teamengine_url || 'http://localhost:8080/teamengine' }} \
            ${{ inputs.test_suite_identifier }} \
            --output-format=raw \
            --teamengine-username=${{ inputs.teamengine_username }} \
            --teamengine-password=${{ inputs.teamengine_password }} \
            $(echo -e ${{ inputs.test_session_arguments }}) 1> ${raw_result_output_path}
        echo "RAW_RESULT_OUTPUT_PATH=${{ github.action_path }}/${raw_result_output_path}" >> "${GITHUB_OUTPUT}"
    - name: 'parse execution results'
      id: 'parse_execution_results'
      shell: bash
      run: |
        cd ${{ github.action_path }}
        md_result_output_path=test-result.md
        uv run cite-runner \
            parse-result \
            --output-format=markdown \
            --include-summary \
            ${{ fromJSON(inputs.include_failed_test_details) && '--include-failed-detail \' || '--no-include-failed-detail \'}}
            ${{ fromJSON(inputs.include_skipped_test_details) && '--include-skipped-detail \' || '--no-include-skipped-detail \'}}
            ${{ fromJSON(inputs.include_passed_test_details) && '--include-passed-detail \' || '--no-include-passed-detail \'}}
            ${{ steps.run_executable_test_suite.outputs.RAW_RESULT_OUTPUT_PATH }} 1> ${md_result_output_path}
        echo "MARKDOWN_RESULT_OUTPUT_PATH=${{ github.action_path }}/${md_result_output_path}" >> "${GITHUB_OUTPUT}"
    - name: 'store execution results as artifacts'
      if: ${{ !cancelled() }}
      uses: actions/upload-artifact@v4
      with:
        name: 'execution-results-${{ inputs.test_suite_identifier }}'
        path: |
          ${{ steps.run_executable_test_suite.outputs.RAW_RESULT_OUTPUT_PATH }}
          ${{ steps.parse_execution_results.outputs.MARKDOWN_RESULT_OUTPUT_PATH }}
    - name: 'Display markdown execution results'
      shell: bash
      run: |
        cat ${{ steps.parse_execution_results.outputs.MARKDOWN_RESULT_OUTPUT_PATH }} >> ${GITHUB_STEP_SUMMARY}
    - name: 'Stop TEAM engine container'
      if: ${{ !cancelled() && !inputs.teamengine_url }}
      shell: 'bash'
      run: docker stop teamengine
